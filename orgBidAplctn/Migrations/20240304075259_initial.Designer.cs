// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using orgBidAplctn.Models;

#nullable disable

namespace orgBidAplctn.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240304075259_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommBidClntBidder", b =>
                {
                    b.Property<long>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SYS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SysId"), 1L, 1);

                    b.Property<decimal?>("AllocQnty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("ALLOC_QNTY")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("AllocRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("ALLOC_RATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("BidAttnStat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("BID_ATTN_STAT")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("BidId")
                        .HasColumnType("bigint")
                        .HasColumnName("BID_ID");

                    b.Property<decimal?>("BidQnty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("BID_QNTY")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("BidRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("BID_RATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PARTY_ID")
                        .IsFixedLength();

                    b.Property<byte?>("SmsAllocStat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("SMS_ALLOC_STAT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SmsContNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SMS_CONT_NO");

                    b.Property<string>("SmsRawMsg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMS_RAW_MSG");

                    b.Property<long?>("SmsRecRef")
                        .HasColumnType("bigint")
                        .HasColumnName("SMS_REC_REF");

                    b.Property<DateTime?>("SmsRecTm")
                        .HasColumnType("datetime")
                        .HasColumnName("SMS_REC_TM");

                    b.Property<string>("SmsRplyApi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMS_RPLY_API");

                    b.Property<byte?>("SmsSendStat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("SMS_SEND_STAT")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SmsSendTxt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMS_SEND_TXT");

                    b.HasKey("SysId");

                    b.HasIndex("BidId");

                    b.HasIndex("PartyId");

                    b.ToTable("COMM_BID_CLNT_BIDDER");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommBidMstr", b =>
                {
                    b.Property<long>("BidId")
                        .HasColumnType("bigint")
                        .HasColumnName("BID_ID");

                    b.Property<string>("ActivatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ACT_BY");

                    b.Property<DateTime?>("ActivationTm")
                        .HasColumnType("datetime")
                        .HasColumnName("ACT_TIME");

                    b.Property<string>("AddBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ADD_BY");

                    b.Property<decimal?>("AllocQnty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("ALLOC_QNTY")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("AllocRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("ALLOC_RATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("AllocTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ALLOC_TIME");

                    b.Property<DateTime>("BidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BID_DATE");

                    b.Property<DateTime>("BidEndTm")
                        .HasColumnType("datetime")
                        .HasColumnName("BID_END_TM");

                    b.Property<string>("BidNote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BID_NOTE");

                    b.Property<decimal>("BidQnty")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("BID_QNTY");

                    b.Property<decimal>("BidRate")
                        .HasColumnType("money")
                        .HasColumnName("BID_RATE");

                    b.Property<byte>("BidSmsProcStat")
                        .HasColumnType("tinyint")
                        .HasColumnName("BID_PROC_STAT");

                    b.Property<byte>("BidStat")
                        .HasColumnType("tinyint")
                        .HasColumnName("BID_STAT");

                    b.Property<DateTime>("BidStrtTm")
                        .HasColumnType("datetime")
                        .HasColumnName("BID_STRT_TM");

                    b.Property<string>("CloseBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CLOSE_BY");

                    b.Property<DateTime?>("CloseTm")
                        .HasColumnType("datetime")
                        .HasColumnName("CLOSE_TIME");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<DateTime?>("EntryTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProcessBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PROC_BY");

                    b.Property<DateTime?>("ProcessTm")
                        .HasColumnType("datetime")
                        .HasColumnName("PROC_TIME");

                    b.Property<string>("ProdId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PROD_ID")
                        .IsFixedLength();

                    b.Property<string>("WareId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("WARE_ID")
                        .IsFixedLength();

                    b.HasKey("BidId");

                    b.HasIndex("CompId");

                    b.HasIndex("ProdId");

                    b.HasIndex("WareId");

                    b.ToTable("COMM_BID_MSTR");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommCompInfo", b =>
                {
                    b.Property<int>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("BinNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("BIN_NO");

                    b.Property<string>("CompArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMP_AREA");

                    b.Property<string>("CompCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMP_COUNTRY");

                    b.Property<string>("CompDist")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMP_DIST");

                    b.Property<string>("CompName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMP_NAME");

                    b.Property<string>("CompStrtNo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("COMP_STRT_NO")
                        .IsFixedLength();

                    b.Property<string>("ContEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONT_EMAIL");

                    b.Property<string>("ContOthNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CONT_OTH_NO");

                    b.Property<string>("ContPersn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CONT_PERSN");

                    b.Property<string>("ContSmsNo")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("CONT_SMS_NO")
                        .IsFixedLength();

                    b.Property<string>("DefCurr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("DEF_CURR")
                        .HasDefaultValueSql("('BDT')")
                        .IsFixedLength();

                    b.Property<byte>("Dscntnd")
                        .HasColumnType("tinyint")
                        .HasColumnName("DSCNTND");

                    b.Property<byte[]>("LogoDb")
                        .HasColumnType("image")
                        .HasColumnName("LOGO_DB");

                    b.Property<string>("LogoFileNm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOGO_FILE_NM");

                    b.Property<int?>("PostCode")
                        .HasColumnType("int")
                        .HasColumnName("POST_CODE");

                    b.Property<decimal?>("VatPrc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("VAT_PRC")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompId");

                    b.ToTable("COMM_COMP_INFO");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommCountryInfo", b =>
                {
                    b.Property<string>("CntryId")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("CNTRY_ID")
                        .IsFixedLength();

                    b.Property<string>("CntryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CNTRY_NAME");

                    b.HasKey("CntryId");

                    b.ToTable("COMM_COUNTRY_INFO");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommLoginInfo", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("USER_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<DateTime?>("BrthDt")
                        .HasColumnType("datetime")
                        .HasColumnName("BRTH_DT");

                    b.Property<byte?>("CanDel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("CAN_DEL")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte?>("CanMod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("CAN_MOD")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<string>("ContNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CONT_NO");

                    b.Property<string>("EmailAdd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL_ADD");

                    b.Property<string>("FastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FAST_NAME");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GENDER")
                        .IsFixedLength();

                    b.Property<byte>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_ACTIVE")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("LastLogTm")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_LOG_TM");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.Property<int>("LoginTp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LOGIN_TP")
                        .HasDefaultValueSql("((1))")
                        .HasComment("1 for User, 2 for Manager, 3 for Admin");

                    b.Property<string>("ProfileImg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PROFILE_PIC");

                    b.Property<string>("UserAdd")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("USER_ADD");

                    b.Property<string>("UserCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_CITY");

                    b.Property<string>("UserCntry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_CNTRY");

                    b.Property<string>("UserNm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_NM");

                    b.Property<string>("UserPass")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("USER_PASS");

                    b.HasKey("UserId");

                    b.HasIndex("CompId");

                    b.HasIndex("UserNm", "UserPass", "CompId")
                        .HasDatabaseName("IX_COMM_LOGIN_INFO");

                    b.ToTable("COMM_LOGIN_INFO");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommNotifyList", b =>
                {
                    b.Property<long>("NotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("NOT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotId"), 1L, 1);

                    b.Property<DateTime?>("CreatTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREAT_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_READ")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("NotBy")
                        .HasColumnType("bigint")
                        .HasColumnName("NOT_BY");

                    b.Property<string>("NotMsg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("NOT_MSG");

                    b.Property<int?>("NotType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NOT_TP")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("NotId");

                    b.HasIndex("NotBy");

                    b.HasIndex(new[] { "IsRead" }, "IX_COMM_NOTIFY_LIST");

                    b.ToTable("COMM_NOTIFY_LIST");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommPartyCat", b =>
                {
                    b.Property<string>("CatId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("CAT_ID")
                        .IsFixedLength();

                    b.Property<long?>("AddBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ADD_BY");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CAT_NAME");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<DateTime?>("CreateTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATE_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("IsDiscontinue")
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_DISCONTINUE");

                    b.HasKey("CatId");

                    b.ToTable("COMM_PARTY_CAT");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommPartyInfo", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PARTY_ID")
                        .IsFixedLength();

                    b.Property<long?>("AddBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ADD_BY");

                    b.Property<string>("CatId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("CAT_ID")
                        .IsFixedLength();

                    b.Property<string>("CntryNm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CNTRY_NM");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<DateTime?>("CreateTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATE_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CustType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CUST_TYPE")
                        .HasDefaultValueSql("('C')")
                        .IsFixedLength();

                    b.Property<string>("DistNm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DIST_NM");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("DOB");

                    b.Property<string>("EmailAdd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL_ADD");

                    b.Property<string>("ImgFileNm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IMG_FILE_NM");

                    b.Property<byte>("IsDiscontinue")
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_DISCONTINUE");

                    b.Property<string>("OthContNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OTH_CONT_NO");

                    b.Property<string>("PartyAdd")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("PARTY_ADD");

                    b.Property<string>("PartyCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("PARTY_CODE")
                        .IsFixedLength();

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PARTY_NAME");

                    b.Property<string>("SmsContNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SMS_CONT_NO");

                    b.HasKey("PartyId");

                    b.HasIndex("CatId")
                        .HasDatabaseName("IX_COMM_PARTY_INFO");

                    b.HasIndex("CompId");

                    b.HasIndex("PartyName", "CompId")
                        .HasDatabaseName("IX_COMM_PARTY_INFO_NMCM");

                    b.ToTable("COMM_PARTY_INFO");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommProdCat", b =>
                {
                    b.Property<string>("CatId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("CAT_ID")
                        .IsFixedLength();

                    b.Property<long>("AddBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ADD_BY");

                    b.Property<string>("BaseUnit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("BASE_UNIT")
                        .IsFixedLength();

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CAT_NAME");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<DateTime?>("CreateTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATE_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("IsDiscontinue")
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_DISCONTINUE");

                    b.Property<byte?>("IsInvItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_INV_ITEM")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("CatId");

                    b.ToTable("COMM_PROD_CAT");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommProdInfo", b =>
                {
                    b.Property<string>("ProdId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("PROD_ID")
                        .IsFixedLength();

                    b.Property<long>("AddBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ADD_BY");

                    b.Property<string>("BarcdId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("BARCD_ID");

                    b.Property<string>("CatId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("CAT_ID")
                        .IsFixedLength();

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<DateTime>("EntryTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImgFileNm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IMG_FILE_NM");

                    b.Property<byte>("IsDiscontinue")
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_DISCONTINUE");

                    b.Property<int>("LeadTm")
                        .HasColumnType("int")
                        .HasColumnName("LEAD_TM");

                    b.Property<decimal>("MaxQnty")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("MAX_QNTY");

                    b.Property<decimal>("MinQnty")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("MIN_QNTY");

                    b.Property<string>("ProdCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("PROD_CODE")
                        .IsFixedLength();

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PROD_NAME");

                    b.Property<string>("ProdSpec")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROD_SPEC");

                    b.Property<string>("Wght")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("WGHT")
                        .IsFixedLength();

                    b.HasKey("ProdId");

                    b.HasIndex("CatId")
                        .HasDatabaseName("IX_COMM_PROD_INFO");

                    b.HasIndex("CompId");

                    b.HasIndex("ProdName", "CompId")
                        .HasDatabaseName("IX_COMM_PROD_INFO_NMCM");

                    b.ToTable("COMM_PROD_INFO");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommSmsLog", b =>
                {
                    b.Property<long>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AUTO_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AutoId"), 1L, 1);

                    b.Property<string>("PartNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PART_NO");

                    b.Property<string>("RefId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("REF_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SmsContain")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SMS_CONTAIN")
                        .IsFixedLength();

                    b.Property<DateTime?>("SmsDtTm")
                        .HasColumnType("datetime")
                        .HasColumnName("SMS_DT_TM");

                    b.Property<string>("SmsFrom")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("SMS_FROM")
                        .IsFixedLength();

                    b.Property<string>("SmsMsg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMS_MSG");

                    b.Property<string>("SmsPhone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("SMS_PHONE");

                    b.Property<string>("SmsStat")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SMS_STAT")
                        .HasDefaultValueSql("('U')")
                        .IsFixedLength();

                    b.Property<string>("SmsType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SMS_TYPE")
                        .HasDefaultValueSql("('A')")
                        .IsFixedLength()
                        .HasComment("A=Attendance, S=Survey, W=Web Sales");

                    b.Property<string>("SmsUplStat")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SMS_UPL_STAT")
                        .HasDefaultValueSql("('N')")
                        .IsFixedLength();

                    b.Property<string>("SmsValidity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SMS_VALIDITY")
                        .HasDefaultValueSql("('V')")
                        .IsFixedLength()
                        .HasComment("Valid Or Invalid Message");

                    b.HasKey("AutoId");

                    b.HasIndex("SmsDtTm")
                        .HasDatabaseName("IX_COMM_SMS_LOG");

                    b.ToTable("COMM_SMS_LOG");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommSmsSett", b =>
                {
                    b.Property<int>("SysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SYS_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SysId"), 1L, 1);

                    b.Property<string>("ReceiveNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RECEIVE_NO");

                    b.Property<string>("SenderNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SENDER_NO");

                    b.Property<string>("TokenNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TOKEN_NO");

                    b.HasKey("SysId");

                    b.ToTable("COMM_SMS_SETT");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommWarehsInfo", b =>
                {
                    b.Property<string>("WareId")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("WARE_ID")
                        .IsFixedLength();

                    b.Property<long?>("AddBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ADD_BY");

                    b.Property<int>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("COMP_ID");

                    b.Property<DateTime?>("CreateTm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CREATE_TM")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("IsDiscontinue")
                        .HasColumnType("tinyint")
                        .HasColumnName("IS_DISCONTINUE");

                    b.Property<string>("WareAdd")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("WARE_ADD");

                    b.Property<string>("WareName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("WARE_NAME");

                    b.HasKey("WareId");

                    b.HasIndex("CompId");

                    b.ToTable("COMM_WAREHS_INFO");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.GetVoucherIdPK", b =>
                {
                    b.Property<string>("VoucherId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetVoucherIdPKs");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommBidClntBidder", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommBidMstr", "Bid")
                        .WithMany("CommBidClntBidder")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_BID_CLNT_BIDDER_COMM_BID_MSTR");

                    b.HasOne("orgBidAplctn.Models.Data.CommPartyInfo", "Party")
                        .WithMany("CommBidClntBidder")
                        .HasForeignKey("PartyId")
                        .IsRequired()
                        .HasConstraintName("FK_COMM_BID_CLNT_BIDDER_COMM_PARTY_INFO");

                    b.Navigation("Bid");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommBidMstr", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommCompInfo", "Comp")
                        .WithMany("CommBidMstr")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_BID_MSTR_COMM_COMP_INFO");

                    b.HasOne("orgBidAplctn.Models.Data.CommProdInfo", "Prod")
                        .WithMany("CommBidMstr")
                        .HasForeignKey("ProdId")
                        .IsRequired()
                        .HasConstraintName("FK_COMM_BID_MSTR_COMM_PROD_INFO");

                    b.HasOne("orgBidAplctn.Models.Data.CommWarehsInfo", "Warehouse")
                        .WithMany("CommBidMstr")
                        .HasForeignKey("WareId")
                        .IsRequired();

                    b.Navigation("Comp");

                    b.Navigation("Prod");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommLoginInfo", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommCompInfo", "Comp")
                        .WithMany("CommLoginInfo")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_LOGIN_INFO_COMM_COMP_INFO");

                    b.Navigation("Comp");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommNotifyList", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommLoginInfo", "NotByNavigation")
                        .WithMany("CommNotifyLists")
                        .HasForeignKey("NotBy")
                        .IsRequired();

                    b.Navigation("NotByNavigation");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommPartyInfo", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommPartyCat", "Cat")
                        .WithMany("CommPartyInfo")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_PARTY_INFO_COMM_PARTY_CAT");

                    b.HasOne("orgBidAplctn.Models.Data.CommCompInfo", "Comp")
                        .WithMany("CommPartyInfo")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_PARTY_INFO_COMM_COMP_INFO");

                    b.Navigation("Cat");

                    b.Navigation("Comp");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommProdInfo", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommProdCat", "Cat")
                        .WithMany("CommProdInfo")
                        .HasForeignKey("CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_PROD_INFO_COMM_PROD_CAT");

                    b.HasOne("orgBidAplctn.Models.Data.CommCompInfo", "Comp")
                        .WithMany("CommProdInfo")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_PROD_INFO_COMM_COMP_INFO");

                    b.Navigation("Cat");

                    b.Navigation("Comp");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommWarehsInfo", b =>
                {
                    b.HasOne("orgBidAplctn.Models.Data.CommCompInfo", "Comp")
                        .WithMany("CommWarehsInfo")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMM_WAREHS_INFO_COMM_COMP_INFO");

                    b.Navigation("Comp");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommBidMstr", b =>
                {
                    b.Navigation("CommBidClntBidder");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommCompInfo", b =>
                {
                    b.Navigation("CommBidMstr");

                    b.Navigation("CommLoginInfo");

                    b.Navigation("CommPartyInfo");

                    b.Navigation("CommProdInfo");

                    b.Navigation("CommWarehsInfo");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommLoginInfo", b =>
                {
                    b.Navigation("CommNotifyLists");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommPartyCat", b =>
                {
                    b.Navigation("CommPartyInfo");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommPartyInfo", b =>
                {
                    b.Navigation("CommBidClntBidder");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommProdCat", b =>
                {
                    b.Navigation("CommProdInfo");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommProdInfo", b =>
                {
                    b.Navigation("CommBidMstr");
                });

            modelBuilder.Entity("orgBidAplctn.Models.Data.CommWarehsInfo", b =>
                {
                    b.Navigation("CommBidMstr");
                });
#pragma warning restore 612, 618
        }
    }
}
